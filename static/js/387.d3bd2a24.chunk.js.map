{"version":3,"file":"static/js/387.d3bd2a24.chunk.js","mappings":"sIAAA,SAASA,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAP,EAAOO,EAET,CACIF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOI,KAAKT,EAAOC,EAEvC,CACe,SAASS,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACTC,EAAOC,UACT,OAAO,IAAIP,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMc,EAAGK,MAAMJ,EAAME,GACzB,SAASd,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CACA,SAASJ,EAAOgB,GACdrB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASgB,EACnE,CACAjB,OAAMkB,EACR,GACF,CACF,C,6EC7BMC,EAAW,uBACXC,EAAU,mCACVC,EAAS,6BAAG,WAAMC,GAAN,kGAEKC,MAAM,WAAD,OACXJ,EADW,YACCG,EADD,oBACkBF,EADlB,oBAFV,cAERI,EAFQ,gBAKIA,EAAKC,OALT,cAKRC,EALQ,yBAMPA,GANO,kCAQdC,QAAQC,IAAI,KAAMC,SARJ,0DAAH,sDAYFC,EAAe,6BAAG,WAAMR,GAAN,gGAERC,MAAM,WAAD,OACXJ,EADW,+BACoBG,EADpB,oBACqCF,EADrC,gCAFG,cAErBI,EAFqB,yBAKpBA,GALoB,gCAO3BG,QAAQC,IAAI,KAAMC,SAPS,yDAAH,sDAW5B,G,sHCvBaE,EAFeC,EAAQ,KAA5BC,QAEsBC,IAAV,0D,SCsCpB,EAnCa,WACX,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAO7B,EAAP,KAAc8B,EAAd,KACA,GAAwBD,EAAAA,EAAAA,UAAS,IAAjC,eAAOE,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAmBR,OAjBAE,EAAAA,EAAAA,YAAU,YACRpB,EAAAA,EAAAA,GAAU,SAAD,OAAUkB,EAAV,aAEN9B,MAAK,SAAAiC,GAAI,OAAIJ,EAAQI,EAAKL,KAAjB,IACTM,OAAM,SAAArC,GAAK,OAAI8B,EAAS9B,EAAMuB,QAAnB,GACf,GAAE,CAACU,IACJZ,QAAQC,IAAItB,IACGsC,EAAAA,EAAAA,UAAQ,WACrB,OAAOP,EAAKQ,KAAI,YAAiC,IAA9BC,EAA6B,EAA7BA,aAAcC,EAAe,EAAfA,KAAMC,EAAS,EAATA,GACrC,MAAO,CACLF,aAAa,kCAAD,OAAoCA,EAApC,QACZC,KAAAA,EACAC,GAAAA,EAEH,GACF,GAAE,CAACX,IAEUQ,KAAI,YAAiC,IAA9BC,EAA6B,EAA7BA,aAAcC,EAAe,EAAfA,KAAMC,EAAS,EAATA,GACvC,OACE,2BACE,yBACE,SAACjB,EAAD,CAASkB,IAAKH,EAAcI,IAAKH,OAGnC,wBAAKA,MALEC,EAQZ,GACF,C","sources":["../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","Api/Api.jsx","components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}","const BASE_URL = 'api.themoviedb.org/3';\nconst API_KEY = 'd0d7894e72847cf4bdccbd92204adc61';\nconst fetchCard = async props => {\n  try {\n    const data = await fetch(\n      `https://${BASE_URL}/${props}?api_key=${API_KEY}&language=en-US`\n    );\n    const arr = await data.json();\n    return arr;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const fetchSearchCard = async props => {\n  try {\n    const data = await fetch(\n      `https://${BASE_URL}/search/movie?query=${props}&api_key=${API_KEY}&include_adult=false&page=1`\n    );\n    return data;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport default fetchCard;\n","const { default: styled } = require('@emotion/styled');\n\nexport const ImgCast = styled.img`\n  weight: 10em;\n  height: 10em;\n`;\n","import React from 'react';\nimport { useEffect, useState, useMemo } from 'react';\nimport { useParams } from 'react-router-dom';\nimport fetchCard from 'Api/Api';\nimport { ImgCast } from './Cast.styled';\nconst Cast = () => {\n  const [error, setError] = useState('');\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    fetchCard(`movie/${movieId}/credits`)\n      // .then(data => data.json())\n      .then(resp => setCast(resp.cast))\n      .catch(error => setError(error.message));\n  }, [movieId]);\n  console.log(error);\n  const render = useMemo(() => {\n    return cast.map(({ profile_path, name, id }) => {\n      return {\n        profile_path: `https://image.tmdb.org/t/p/w500${profile_path}??''`,\n        name,\n        id,\n      };\n    });\n  }, [cast]);\n\n  return render.map(({ profile_path, name, id }) => {\n    return (\n      <ul key={id}>\n        <li>\n          <ImgCast src={profile_path} alt={name} />\n        </li>\n\n        <li>{name}</li>\n      </ul>\n    );\n  });\n};\n\nexport default Cast;\n// {murkup && murkup.map( => console.log(name))}\n"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","BASE_URL","API_KEY","fetchCard","props","fetch","data","json","arr","console","log","message","fetchSearchCard","ImgCast","require","default","img","useState","setError","cast","setCast","movieId","useParams","useEffect","resp","catch","useMemo","map","profile_path","name","id","src","alt"],"sourceRoot":""}